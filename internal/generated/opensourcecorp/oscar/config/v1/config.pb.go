// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: opensourcecorp/oscar/config/v1/config.proto

package oscarcfgpbv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config defines the top-level structure of oscar's config file.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version is the version string for the codebase. Must be a valid Semantic Version string.
	//
	// Example: "1.0.0"
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Deliverables is the collection of possible deliverable artifacts.
	Deliverables  *Deliverables `protobuf:"bytes,2,opt,name=deliverables,proto3" json:"deliverables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_opensourcecorp_oscar_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Config) GetDeliverables() *Deliverables {
	if x != nil {
		return x.Deliverables
	}
	return nil
}

// Deliverables contains a field for each possible deliverable.
type Deliverables struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// See [GoGitHubRelease].
	GoGithubRelease *GoGitHubRelease `protobuf:"bytes,1,opt,name=go_github_release,json=goGithubRelease,proto3" json:"go_github_release,omitempty"`
	// See [ContainerImage].
	ContainerImage *ContainerImage `protobuf:"bytes,2,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Deliverables) Reset() {
	*x = Deliverables{}
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deliverables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deliverables) ProtoMessage() {}

func (x *Deliverables) ProtoReflect() protoreflect.Message {
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deliverables.ProtoReflect.Descriptor instead.
func (*Deliverables) Descriptor() ([]byte, []int) {
	return file_opensourcecorp_oscar_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *Deliverables) GetGoGithubRelease() *GoGitHubRelease {
	if x != nil {
		return x.GoGithubRelease
	}
	return nil
}

func (x *Deliverables) GetContainerImage() *ContainerImage {
	if x != nil {
		return x.ContainerImage
	}
	return nil
}

// GoGitHubRelease defines the arguments necessary to create GitHub Releases for Go binaries.
type GoGitHubRelease struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The filepaths to the "main" packages to be built.
	//
	// Example: - "./cmd/oscar"
	BuildSources []string `protobuf:"bytes,1,rep,name=build_sources,json=buildSources,proto3" json:"build_sources,omitempty"`
	// Optionally flags whether the Release should be left in Draft state at create-time. This can
	// be useful to set if you want to review the Release contents before actually publishing.
	//
	// Example: false
	Draft         bool `protobuf:"varint,2,opt,name=draft,proto3" json:"draft,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoGitHubRelease) Reset() {
	*x = GoGitHubRelease{}
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoGitHubRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoGitHubRelease) ProtoMessage() {}

func (x *GoGitHubRelease) ProtoReflect() protoreflect.Message {
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoGitHubRelease.ProtoReflect.Descriptor instead.
func (*GoGitHubRelease) Descriptor() ([]byte, []int) {
	return file_opensourcecorp_oscar_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *GoGitHubRelease) GetBuildSources() []string {
	if x != nil {
		return x.BuildSources
	}
	return nil
}

func (x *GoGitHubRelease) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

// ContainerImage defines the arguments necessary to build & push container image artifacts.
type ContainerImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target registry provider domain.
	//
	// Example: "ghcr.io"
	Registry string `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	// The target OCI repository name.
	//
	// Example: "opensourcecorp"
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The target OCI repository. May contain as many subpaths to the actual image artifact as
	// necessary based on the registry, e.g. "my-repo/my-image-group/my-image".
	//
	// Example: "oscar"
	Repo          string `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerImage) Reset() {
	*x = ContainerImage{}
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImage) ProtoMessage() {}

func (x *ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_opensourcecorp_oscar_config_v1_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImage.ProtoReflect.Descriptor instead.
func (*ContainerImage) Descriptor() ([]byte, []int) {
	return file_opensourcecorp_oscar_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerImage) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *ContainerImage) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ContainerImage) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

var File_opensourcecorp_oscar_config_v1_config_proto protoreflect.FileDescriptor

const file_opensourcecorp_oscar_config_v1_config_proto_rawDesc = "" +
	"\n" +
	"+opensourcecorp/oscar/config/v1/config.proto\x12\x1eopensourcecorp.oscar.config.v1\x1a\x1bbuf/validate/validate.proto\"\xb6\x01\n" +
	"\x06Config\x12Z\n" +
	"\aversion\x18\x01 \x01(\tB@\xbaH=r;29^[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9]+)?(\\+[a-zA-Z0-9]+)?$R\aversion\x12P\n" +
	"\fdeliverables\x18\x02 \x01(\v2,.opensourcecorp.oscar.config.v1.DeliverablesR\fdeliverables\"\xc4\x01\n" +
	"\fDeliverables\x12[\n" +
	"\x11go_github_release\x18\x01 \x01(\v2/.opensourcecorp.oscar.config.v1.GoGitHubReleaseR\x0fgoGithubRelease\x12W\n" +
	"\x0fcontainer_image\x18\x02 \x01(\v2..opensourcecorp.oscar.config.v1.ContainerImageR\x0econtainerImage\"T\n" +
	"\x0fGoGitHubRelease\x12+\n" +
	"\rbuild_sources\x18\x01 \x03(\tB\x06\xbaH\x03\xc8\x01\x01R\fbuildSources\x12\x14\n" +
	"\x05draft\x18\x02 \x01(\bR\x05draft\"n\n" +
	"\x0eContainerImage\x12\"\n" +
	"\bregistry\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bregistry\x12\x1c\n" +
	"\x05owner\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x05owner\x12\x1a\n" +
	"\x04repo\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04repoB`Z^github.com/opensourcecorp/oscar/internal/generated/opensourcecorp/oscar/config/v1;oscarcfgpbv1b\x06proto3"

var (
	file_opensourcecorp_oscar_config_v1_config_proto_rawDescOnce sync.Once
	file_opensourcecorp_oscar_config_v1_config_proto_rawDescData []byte
)

func file_opensourcecorp_oscar_config_v1_config_proto_rawDescGZIP() []byte {
	file_opensourcecorp_oscar_config_v1_config_proto_rawDescOnce.Do(func() {
		file_opensourcecorp_oscar_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_opensourcecorp_oscar_config_v1_config_proto_rawDesc), len(file_opensourcecorp_oscar_config_v1_config_proto_rawDesc)))
	})
	return file_opensourcecorp_oscar_config_v1_config_proto_rawDescData
}

var file_opensourcecorp_oscar_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_opensourcecorp_oscar_config_v1_config_proto_goTypes = []any{
	(*Config)(nil),          // 0: opensourcecorp.oscar.config.v1.Config
	(*Deliverables)(nil),    // 1: opensourcecorp.oscar.config.v1.Deliverables
	(*GoGitHubRelease)(nil), // 2: opensourcecorp.oscar.config.v1.GoGitHubRelease
	(*ContainerImage)(nil),  // 3: opensourcecorp.oscar.config.v1.ContainerImage
}
var file_opensourcecorp_oscar_config_v1_config_proto_depIdxs = []int32{
	1, // 0: opensourcecorp.oscar.config.v1.Config.deliverables:type_name -> opensourcecorp.oscar.config.v1.Deliverables
	2, // 1: opensourcecorp.oscar.config.v1.Deliverables.go_github_release:type_name -> opensourcecorp.oscar.config.v1.GoGitHubRelease
	3, // 2: opensourcecorp.oscar.config.v1.Deliverables.container_image:type_name -> opensourcecorp.oscar.config.v1.ContainerImage
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_opensourcecorp_oscar_config_v1_config_proto_init() }
func file_opensourcecorp_oscar_config_v1_config_proto_init() {
	if File_opensourcecorp_oscar_config_v1_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_opensourcecorp_oscar_config_v1_config_proto_rawDesc), len(file_opensourcecorp_oscar_config_v1_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opensourcecorp_oscar_config_v1_config_proto_goTypes,
		DependencyIndexes: file_opensourcecorp_oscar_config_v1_config_proto_depIdxs,
		MessageInfos:      file_opensourcecorp_oscar_config_v1_config_proto_msgTypes,
	}.Build()
	File_opensourcecorp_oscar_config_v1_config_proto = out.File
	file_opensourcecorp_oscar_config_v1_config_proto_goTypes = nil
	file_opensourcecorp_oscar_config_v1_config_proto_depIdxs = nil
}
